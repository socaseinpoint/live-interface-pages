{"version":3,"sources":["components/Input/Input.module.scss","screens/AuthScreen/AuthScreen.module.scss","components/PasswordInput/PasswordInput.module.scss","components/Button/Button.module.scss","components/Button/Button.tsx","components/Form/FormContext.tsx","components/Form/Form.tsx","components/Field/Field.tsx","components/Input/Input.tsx","components/PasswordInput/PasswordInput.tsx","services/isRequired.ts","screens/AuthScreen/AuthScreen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","onClick","title","autoWidth","className","classNames","styles","button","defaultProps","FormContext","React","createContext","values","setValue","_","__","meta","touched","errors","Form","onSubmit","render","validators","useState","setTouched","setValues","Object","keys","reduce","acc","key","map","validator","Provider","value","name","e","preventDefault","some","error","Field","placeholder","useContext","onChange","Input","icon","type","root","src","alt","target","input","length","PasswordInput","props","isPasswordShown","setIsPasswordShown","isRequired","errMessage","undefined","AuthScreen","form","login","password","alert","field","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.052ce17c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Input_root__2tE1E\",\"input\":\"Input_input__3rPb3\",\"input_icon\":\"Input_input_icon__2BQ-y\",\"errors\":\"Input_errors__2hcf4\",\"icon\":\"Input_icon__YGkpt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"AuthScreen_root__5wYj9\",\"title\":\"AuthScreen_title__3epFJ\",\"form\":\"AuthScreen_form__19dPK\",\"field\":\"AuthScreen_field__2hC7Z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"PasswordInput_root__1aYfI\",\"show-password\":\"PasswordInput_show-password__2XW2b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2Lf63\",\"button_auto-width\":\"Button_button_auto-width__1VQb4\"};","import { FC } from \"react\";\nimport classNames from \"classnames\";\nimport styles from \"./Button.module.scss\";\n\nconst Button: FC<ButtonProps> = ({ onClick, title, autoWidth }) => {\n  return (\n    <button\n      className={classNames(\n        styles.button,\n        autoWidth && styles[\"button_auto-width\"]\n      )}\n      onClick={onClick}\n    >\n      {title}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  autoWidth: false,\n};\n\ninterface ButtonProps {\n  onClick?: () => void;\n  title: string;\n  autoWidth?: boolean;\n}\n\nexport default Button;\n","import React from \"react\";\nimport { FormContextValue } from \"./types\";\n\nconst FormContext = React.createContext<FormContextValue>({\n  values: {},\n  setValue: (_: string, __: any) => {},\n  meta: {\n    touched: false,\n    errors: {},\n  },\n});\n\nexport default FormContext;\n","import { FC, useState } from \"react\";\nimport FormContext from \"./FormContext\";\nimport { FormErrors, FormValidators } from \"./types\";\n\nconst Form: FC<FormProps> = ({ onSubmit, render, validators }) => {\n  const [touched, setTouched] = useState(false);\n  const [values, setValues] = useState<{\n    [key: string]: any;\n  }>({});\n\n  const setValue = (name: string, value: any) => {\n    setValues({ ...values, [name]: value });\n  };\n\n  const errors: FormErrors = Object.keys(validators).reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: validators[key].map((validator) => validator(values[key])),\n    };\n  }, {});\n\n  return (\n    <FormContext.Provider\n      value={{\n        values,\n        setValue,\n        meta: {\n          touched,\n          errors,\n        },\n      }}\n    >\n      <form\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          e.preventDefault();\n          setTouched(true);\n\n          if (\n            Object.keys(errors).some((key) =>\n              errors[key].some((error) => !!error)\n            )\n          ) {\n            return;\n          }\n\n          onSubmit(values);\n\n          setValues({});\n          setTouched(false);\n        }}\n      >\n        {render()}\n      </form>\n    </FormContext.Provider>\n  );\n};\n\ninterface FormProps {\n  onSubmit: (values: { [key: string]: any }) => void;\n  render: () => React.ReactNode;\n  validators: FormValidators;\n}\n\nexport default Form;\n","import { FC, useContext } from \"react\";\nimport FormContext from \"../Form/FormContext\";\nimport { FieldRenderProps } from \"./types\";\n\nconst Field: FC<FieldProps> = ({ name, render, placeholder }) => {\n  const { meta, setValue, values } = useContext(FormContext);\n\n  return (\n    <>\n      {render({\n        value: values[name],\n        onChange: (value: string) => setValue(name, value),\n        meta: {\n          touched: meta.touched,\n          errors: meta.errors[name],\n        },\n        placeholder,\n      })}\n    </>\n  );\n};\n\ninterface FieldProps {\n  name: string;\n  render: (props: FieldRenderProps) => React.ReactElement;\n  placeholder: string;\n}\n\nexport default Field;\n","import { ChangeEvent, FC, useEffect } from \"react\";\nimport styles from \"./Input.module.scss\";\nimport classNames from \"classnames\";\nimport { FieldRenderProps } from \"../Field/types\";\n\nconst Input: FC<FieldRenderProps & InputProps> = ({\n  onChange,\n  value,\n  placeholder,\n  icon,\n  meta,\n  type,\n}) => {\n  const { touched, errors } = meta;\n\n  return (\n    <div className={styles.root}>\n      {icon && <img src={icon} alt=\"Icon\" className={styles.icon} />}\n      <input\n        type={type}\n        onChange={(e: ChangeEvent<HTMLInputElement>) => {\n          onChange(e.target.value);\n        }}\n        value={value || \"\"}\n        placeholder={placeholder}\n        className={classNames(styles.input, !!icon && styles[\"input_icon\"])}\n      />\n      {touched && errors && errors.length && (\n        <div className={styles.errors}>{errors.map((error) => error)}</div>\n      )}\n    </div>\n  );\n};\n\nInput.defaultProps = {\n  type: \"text\",\n};\n\nexport type InputProps = FieldRenderProps & {\n  icon?: string;\n  type?: \"text\" | \"password\" | \"email\";\n};\n\nexport default Input;\n","import { FC, useState } from \"react\";\nimport Input from \"../Input\";\nimport { InputProps } from \"../Input/Input\";\nimport { PUBLIC_URL } from \"../../constants\";\nimport styles from \"./PasswordInput.module.scss\";\n\nconst PasswordInput: FC<InputProps> = (props) => {\n  const [isPasswordShown, setIsPasswordShown] = useState(false);\n  return (\n    <div className={styles.root}>\n      <Input {...props} type={isPasswordShown ? \"text\" : \"password\"} />\n      <div\n        className={styles[\"show-password\"]}\n        onClick={() => setIsPasswordShown(!isPasswordShown)}\n      >\n        <img\n          src={PUBLIC_URL + \"icons/view.svg\"}\n          className={styles.icon}\n          alt=\"Toggle password\"\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default PasswordInput;\n","const isRequired = (errMessage: string) => (value: string) =>\n  !value ? errMessage : undefined;\n\nexport default isRequired;\n","import { Form, Input, PasswordInput, Button, Field } from \"../../components\";\nimport styles from \"./AuthScreen.module.scss\";\nimport { isRequired } from \"../../services\";\nimport { PUBLIC_URL } from \"../../constants\";\n\nconst AuthScreen = () => {\n  const onSubmit = ({ login, password }: { [key: string]: string }) => {\n    alert(`Email: ${login} Password: ${password}`);\n  };\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.form}>\n        <h1 className={styles.title}>Live interface</h1>\n        <Form\n          onSubmit={onSubmit}\n          validators={{\n            login: [isRequired(\"Login is required\")],\n            password: [isRequired(\"Password is required\")],\n          }}\n          render={() => (\n            <>\n              <div className={styles.field}>\n                <Field\n                  name=\"login\"\n                  render={(props) => (\n                    <Input\n                      type=\"email\"\n                      {...props}\n                      icon={PUBLIC_URL + \"icons/user.svg\"}\n                    />\n                  )}\n                  placeholder=\"Email\"\n                />\n              </div>\n              <div className={styles.field}>\n                <Field\n                  name=\"password\"\n                  render={(props) => (\n                    <PasswordInput\n                      {...props}\n                      icon={PUBLIC_URL + \"icons/lock.svg\"}\n                    />\n                  )}\n                  placeholder=\"Password\"\n                />\n              </div>\n              <Button title=\"Submit\" autoWidth />\n            </>\n          )}\n        ></Form>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthScreen;\n","import React from \"react\";\nimport { AuthScreen } from \"./screens\";\nimport \"./App.css\";\n\nfunction App() {\n  return <AuthScreen />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}